// Code generated by mockery v2.28.0. DO NOT EDIT.

package cache

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheInterface is an autogenerated mock type for the CacheInterface type
type MockCacheInterface struct {
	mock.Mock
}

type MockCacheInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheInterface) EXPECT() *MockCacheInterface_Expecter {
	return &MockCacheInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key, result
func (_m *MockCacheInterface) Get(ctx context.Context, key string, result interface{}) (bool, error) {
	ret := _m.Called(ctx, key, result)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (bool, error)); ok {
		return rf(ctx, key, result)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, key, result)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - result interface{}
func (_e *MockCacheInterface_Expecter) Get(ctx interface{}, key interface{}, result interface{}) *MockCacheInterface_Get_Call {
	return &MockCacheInterface_Get_Call{Call: _e.mock.On("Get", ctx, key, result)}
}

func (_c *MockCacheInterface_Get_Call) Run(run func(ctx context.Context, key string, result interface{})) *MockCacheInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockCacheInterface_Get_Call) Return(_a0 bool, _a1 error) *MockCacheInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheInterface_Get_Call) RunAndReturn(run func(context.Context, string, interface{}) (bool, error)) *MockCacheInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, ttl
func (_m *MockCacheInterface) Set(ctx context.Context, key string, value interface{}, ttl time.Duration) error {
	ret := _m.Called(ctx, key, value, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCacheInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - ttl time.Duration
func (_e *MockCacheInterface_Expecter) Set(ctx interface{}, key interface{}, value interface{}, ttl interface{}) *MockCacheInterface_Set_Call {
	return &MockCacheInterface_Set_Call{Call: _e.mock.On("Set", ctx, key, value, ttl)}
}

func (_c *MockCacheInterface_Set_Call) Run(run func(ctx context.Context, key string, value interface{}, ttl time.Duration)) *MockCacheInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockCacheInterface_Set_Call) Return(_a0 error) *MockCacheInterface_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheInterface_Set_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) error) *MockCacheInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCacheInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCacheInterface creates a new instance of MockCacheInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCacheInterface(t mockConstructorTestingTNewMockCacheInterface) *MockCacheInterface {
	mock := &MockCacheInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

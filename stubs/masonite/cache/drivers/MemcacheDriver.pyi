from ...foundation.Application import Application
from typing import Any, Callable, TypeVar
from _typeshed import Incomplete

T = TypeVar('T', bound=MemcacheDriver)

class MemcacheDriver:
    application: Application
    connection: Incomplete
    options: dict[str, Any]
    def __getattr__(self, name: str) -> Any: ... # incomplete
    def __init__(self, application: Application) -> None: ...
    def set_options(self, options: dict[str, Any]) -> T: ...
    def get_connection(self): ...
    def add(self, key: str, value: Any) -> None: ...
    def get(self, key: str, default: Any | None = ..., **options: Any) -> Any: ...
    def put(self, key: str, value: Any, seconds: int | None = ..., **options: Any) -> None: ...
    def has(self, key: str) -> bool: ...
    def increment(self, key: str, amount: int = ...) -> None: ...
    def decrement(self, key: str, amount: int = ...) -> None: ...
    def remember(self, key: str, callable: Callable[[T], None]) -> None: ...
    def forget(self, key: str) -> None: ...
    def flush(self) -> None: ...
    def get_name(self) -> str: ...
    def get_value(self, value: Any) -> Any: ...

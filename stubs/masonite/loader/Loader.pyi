from typing import Any, Callable, Optional

def parameters_filter(obj_name: str, obj: object) -> bool: ...

class Loader:
    def get_modules(self, files_or_directories: str | list[str], raise_exception: bool = ...) -> dict[str, Any]: ...
    def find(self, class_instance: Any, paths: str | list[str], class_name: str, raise_exception: bool = ...) -> Optional[Any]: ...
    def find_all(self, class_instance: Any, paths: str | list[str], raise_exception: bool = ...) -> dict[str, Any]: ...
    def get_object(self, path_or_module: str| Any, object_name: str, raise_exception: bool = ...) -> Any: ...
    def get_objects(self, path_or_module: str | Any, filter_method: Optional[Callable[[Any], bool]] = ..., raise_exception: bool = ...) -> dict[str, Any]: ...
    def get_parameters(self, module_or_path: str | Any) -> dict[str, Any]: ...

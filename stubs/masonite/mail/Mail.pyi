from ..foundation.Application import Application
from .Mailable import Mailable
from typing import Any, Optional, Protocol, TypeVar

MD = TypeVar('MD', bound=MailDriver)

class MailDriver(Protocol):
    def set_options(self, options: dict[str, Any]) -> MD: ...
    def send(self) -> None: ...


M = TypeVar('M', bound=Mail)

class Mail:
    application: Application
    drivers: dict[str, MailDriver]
    driver_config: dict[str, Any]
    options: dict[str, Any]
    def __init__(self, application: Application, driver_config: Optional[dict[str, Any]] = ...) -> None: ...
    def add_driver(self, name: str, driver: MailDriver) -> None: ...
    def set_configuration(self, config: dict[str, Any]) -> M: ...
    def get_driver(self, name: Optional[str] = ...) -> MailDriver: ...
    def get_config_options(self, driver: Optional[str] = ...) -> dict[str, Any]: ...
    def mailable(self, mailable: Mailable) -> M: ...
    def send(self, driver: Optional[str] = ...) -> None: ...

from .MessageAttachment import MessageAttachment as MessageAttachment
from masonite.foundation import Application
from typing import Any, Protocol, TypeVar

MailDriver_T = TypeVar('MailDriver_T', bound=MailDriver)

class MailDriver(Protocol):
    def set_options(self, options: dict[str, Any]) -> MailDriver_T: ...
    def send(self) -> None: ...

Mailable_T = TypeVar('Mailable_T', bound=Mailable)

class Mailable:
    text_content: str
    html_content: str
    attachments: list[MessageAttachment]
    headers: dict[str, str]
    application: Application
    def __init__(self) -> None: ...
    def to(self, to: str) -> Mailable_T: ...
    def cc(self, cc: str) -> Mailable_T: ...
    def bcc(self, bcc: str) -> Mailable_T: ...
    def header(self, key: str, value: str) -> Mailable_T: ...
    def set_application(self, application: Application) -> Mailable_T: ...
    def from_(self, _from: str) -> Mailable_T: ...
    def attach(self, name: str, path: str) -> Mailable_T: ...
    def reply_to(self, reply_to: str) -> Mailable_T: ...
    def subject(self, subject: str) -> Mailable_T: ...
    def text(self, content: str) -> Mailable_T: ...
    def html(self, content: str) -> Mailable_T: ...
    def view(self, view: str, data: dict[Any, Any] = ...) -> Mailable_T: ...
    def priority(self, priority: int) -> Mailable_T: ...
    def high_priority(self) -> Mailable_T: ...
    def low_priority(self) -> Mailable_T: ...
    def driver(self, driver: MailDriver) -> Mailable_T: ...
    def get_response(self) -> str: ...
    def get_options(self) -> dict[str, Any]: ...
    def build(self, *args: Any, **kwargs: Any) -> Mailable_T: ...

from .AnonymousNotifiable import AnonymousNotifiable as AnonymousNotifiable
from .Notification import Notification as Notification
from .NotificationManager import NotificationManager as NotificationManager
from _typeshed import Incomplete

class NotificationWithAsserts(Notification):
    def assertSentVia(self, *drivers): ...
    def assertEqual(self, value, reference): ...
    def assertNotEqual(self, value, reference): ...
    def assertIn(self, value, container): ...
    @classmethod
    def patch(cls, target) -> None: ...

class MockNotification(NotificationManager):
    count: int
    last_notifiable: Incomplete
    last_notification: Incomplete
    def __init__(self, application, *args, **kwargs) -> None: ...
    def send(self, notifiables, notification, drivers=..., dry: bool = ..., fail_silently: bool = ...): ...
    sent_notifications: Incomplete
    def resetCount(self): ...
    def assertNothingSent(self): ...
    def assertCount(self, count): ...
    def assertSentTo(self, notifiable, notification_class, callable_assert: Incomplete | None = ..., count: Incomplete | None = ...): ...
    def last(self): ...
    def assertLast(self, callable_assert): ...
    def assertNotSentTo(self, notifiable, notification_class): ...

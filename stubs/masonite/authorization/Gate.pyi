from ..foundation.Application import Application
from ..exceptions.exceptions import GateDoesNotExist as GateDoesNotExist, PolicyDoesNotExist as PolicyDoesNotExist
from .AuthorizationResponse import AuthorizationResponse
from _typeshed import Incomplete
from typing import Any, Callable, TypeVar


UserCallback = Callable[[], None]
Policies = dict[Any, Any]
PermissionCondition = Callable[..., bool]
Permissions = dict[str, PermissionCondition]
BeforeAfterCallback = Callable[[Any, str], bool]
BeforeAfterCallbacks = list[BeforeAfterCallback]
T = TypeVar('T', bound=Gate)

class Gate:
    application: Application
    user_callback: UserCallback | None
    policies: Policies
    permissions: Permissions
    before_callbacks: BeforeAfterCallbacks
    after_callbacks: BeforeAfterCallbacks
    def __init__(
        self,
        application: Application,
        user_callback: UserCallback | None = ...,
        policies: Policies = ...,
        permissions: Permissions = ...,
        before_callbacks: BeforeAfterCallbacks = ...,
        after_callbacks: BeforeAfterCallbacks = ...
    ) -> None: ...
    def define(self, permission: str, condition: PermissionCondition) -> None: ...
    def register_policies(self, policies: Policies) -> T: ...
    def get_policy_for(self, instance_or_class: Any) -> Any: ...
    def before(self, before_callback: BeforeAfterCallback) -> None: ...
    def after(self, after_callback: BeforeAfterCallback) -> None: ...
    def allows(self, permission: str, *args: Any) -> bool: ...
    def denies(self, permission: str, *args: Any) -> bool: ...
    def has(self, permission: str) -> bool: ...
    def for_user(self, user: Any) -> T: ...
    def any(self, permissions: list[str], *args: Any) -> bool: ...
    def none(self, permissions: list[str], *args: Any) -> bool: ...
    def authorize(self, permission: str, *args: Any) -> AuthorizationResponse: ...
    def inspect(self, permission: str, *args: Any) -> AuthorizationResponse: ...
    def check(self, permission: str, *args: Any) -> bool: ...

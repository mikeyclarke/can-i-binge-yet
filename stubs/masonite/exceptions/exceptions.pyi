from _typeshed import Incomplete

HEADERS = dict[str, str]

class DriverNotFound(Exception): ...
class DriverLibraryNotFound(Exception): ...
class FileTypeException(Exception): ...
class RequiredContainerBindingNotFound(Exception): ...
class MissingContainerBindingNotFound(Exception): ...
class UnacceptableDriverType(Exception): ...
class ContainerError(Exception): ...
class InvalidCSRFToken(Exception): ...
class InvalidHTTPStatusCode(Exception): ...
class RouteMiddlewareNotFound(Exception): ...
class ResponseError(Exception): ...
class InvalidAutoloadPath(Exception): ...
class AutoloadContainerOverwrite(Exception): ...
class InvalidSecretKey(Exception): ...
class InvalidToken(Exception): ...
class StrictContainerException(Exception): ...
class InvalidRouteCompileException(Exception): ...
class RouteException(Exception): ...

class RouteNotFoundException(Exception):
    is_http_exception: bool
    message: str
    def __init__(self, message: str) -> None: ...
    def get_response(self) -> str: ...
    def get_status(self) -> int: ...

class MethodNotAllowedException(Exception):
    is_http_exception: bool
    message: str
    headers: HEADERS
    def __init__(self, allowed_methods: list[str], method: str) -> None: ...
    def get_response(self) -> str: ...
    def get_headers(self) -> HEADERS: ...
    def get_status(self) -> int: ...

class DebugException(Exception): ...
class DumpException(Exception): ...
class ViewException(Exception): ...
class QueueException(Exception): ...
class AmbiguousError(Exception): ...
class ProjectLimitReached(Exception): ...
class ProjectProviderTimeout(Exception): ...
class ProjectProviderHttpError(Exception): ...
class ProjectTargetNotEmpty(Exception): ...
class NotificationException(Exception): ...

class ModelNotFoundException(Exception):
    is_http_exception: bool
    def get_response(self) -> str: ...
    def get_status(self) -> int: ...

class AuthorizationException(Exception):
    is_http_exception: bool
    message: str
    status: int
    def __init__(self, message: str = ..., status: int = ...) -> None: ...
    def get_response(self) -> str: ...
    def get_status(self) -> int: ...

class ThrottleRequestsException(Exception):
    message: str
    status: int
    headers: HEADERS
    def __init__(self, message: str = ..., status: int = ..., headers: HEADERS = ...) -> None: ...
    def get_headers(self) -> HEADERS: ...
    def get_response(self) -> str: ...
    def get_status(self) -> int: ...

class GateDoesNotExist(Exception): ...
class PolicyDoesNotExist(Exception): ...
class MixManifestNotFound(Exception): ...
class MixFileNotFound(Exception): ...
class InvalidConfigurationLocation(Exception): ...
class InvalidConfigurationSetup(Exception): ...
class InvalidPackageName(Exception): ...
class LoaderNotFound(Exception): ...

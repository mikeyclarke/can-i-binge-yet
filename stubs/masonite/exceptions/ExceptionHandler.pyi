from ..foundation.Application import Application
from typing import Any, Optional, Protocol, TypeVar


class HandlerDriver(Protocol):
    def handle(self, exception: Exception) -> Optional[str]: ...


T = TypeVar('T', bound=ExceptionHandler)

class ExceptionHandler:
    application: Application
    drivers: dict[str, HandlerDriver]
    driver_config: dict[str, Any]
    options: dict[str, Any]
    def __init__(self, application: Application, driver_config: Optional[dict[str, Any]] = ...) -> None: ...
    def add_driver(self, name: str, driver: HandlerDriver) -> None: ...
    def set_configuration(self, config: dict[str, Any]) -> T: ...
    def get_driver(self, name: Optional[str] = ...) -> HandlerDriver: ...
    def get_config_options(self, driver: Optional[str] = ...) -> dict[str, Any]: ...
    def handle(self, exception: Exception) -> Optional[str]: ...

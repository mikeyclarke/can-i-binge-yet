from ..request.request import Request
from ..response.response import Response
from typing import Optional, Protocol


class Middleware(Protocol):
    def before(self, request: Request, response: Response) -> Optional[Response]: ...
    def after(self, request: Request, response: Response) -> Optional[Response]: ...


class MiddlewareCapsule:
    route_middleware: dict[str, Middleware]
    http_middleware: list[Middleware]
    def __init__(self) -> None: ...
    def add(self, middleware: Middleware) -> MiddlewareCapsule: ...
    def remove(self, middleware: Middleware) -> MiddlewareCapsule: ...
    def get_route_middleware(self, keys: Optional[str] = ...) -> dict[str, Middleware] | list[Middleware]: ...
    def get_http_middleware(self) -> list[Middleware]: ...
    def run_route_middleware(self, middlewares: str, request: Request, response: Response, callback: str = ...) -> bool: ...

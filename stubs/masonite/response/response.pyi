from ..foundation.Application import Application
from ..cookies import CookieJar
from ..headers import Header, HeaderBag
from typing import Any, Optional

class Response:
    app: Application
    content: str
    statuses: dict[int, str]
    header_bag: HeaderBag
    cookie_jar: CookieJar
    original: Any
    def __init__(self, app: Application) -> None: ...
    def json(self, payload: Any, status: int = ...) -> bytes: ...
    def make_headers(self, content_type: str = ...) -> None: ...
    def header(self, name: str, value: str = ...) -> Optional[str]: ...
    def with_headers(self, headers: dict[str, Any]) -> Response: ...
    def get_headers(self) -> list[tuple[str, Header]]: ...
    def cookie(self, name: str, value: str = ..., **options: Any) -> Optional[str]: ...
    def delete_cookie(self, name: str) -> Response: ...
    def get_response_content(self) -> bytes: ...
    def status(self, status: str | int) -> Response: ...
    def is_status(self, code: int) -> bool: ...
    def get_status_code(self) -> str: ...
    def get_status(self) -> Optional[str]: ...
    def data(self) -> bytes: ...
    def converted_data(self) -> str | bytes: ...
    def view(self, view: Any, status: int = ...) -> bytes | Response: ...
    def back(self) -> Response: ...
    def redirect(
        self,
        location: str = ...,
        name: str = ...,
        params: dict[str, Any] = ...,
        url: str = ...,
        status: int = ...,
        query_params: dict[str, Any] = ...
    ) -> Response: ...
    def to_bytes(self) -> bytes: ...
    def download(self, name: str, location: str, force: bool = ...) -> Response: ...

from ..foundation.Application import Application
from .File import File
from .FileStream import FileStream
from .UploadedFile import UploadedFile
from typing import Any, Optional, Protocol, TypeVar


Options = dict[str, Any]
Content = bytes
D_T = TypeVar('D_T', bound=Driver)

class Driver(Protocol):
    def append(self, file_path: str, content: Content) -> Optional[Content]: ...
    def copy(self, from_file_path: str, to_file_path: str) -> Optional[str]: ...
    def delete(self, file_path: str) -> None: ...
    def exists(self, file_path: str) -> bool: ...
    def get(self, file_path: str) -> bytes | None: ...
    def get_files(self, directory: str = ...) -> list[File]: ...
    def get_name(self, path: str, alias: str) -> str: ...
    def make_file_path_if_not_exists(self, file_path: str) -> bool: ...
    def missing(self, file_path: str) -> bool: ...
    def move(self, from_file_path: str, to_file_path: str) -> Optional[str]: ...
    def prepend(self, file_path: str, content: Content) -> Content: ...
    def put(self, file_path: str, content: Content) -> Content: ...
    def put_file(self, file_path: str, content: UploadedFile, name: str | None = ...) -> str: ...
    def set_options(self, options: Options) -> D_T: ...
    def store(self, file: File, name: Optional[str] = ...) -> str: ...
    def stream(self, file_path: str) -> FileStream: ...


class Storage:
    application: Application
    drivers: dict[str, Driver]
    store_config: dict[str, Any]
    options: dict[str, Any]
    def __init__(self, application: Application, store_config: dict[str, Any] = ...) -> None: ...
    def add_driver(self, name: str, driver: Driver) -> None: ...
    def set_configuration(self, config: dict[str, Any]) -> Storage: ...
    def get_driver(self, name: str = ...) -> Driver: ...
    def get_config_options(self, name: str = ...) -> dict[Any, Any]: ...
    def disk(self, name: str = ...) -> Driver: ...

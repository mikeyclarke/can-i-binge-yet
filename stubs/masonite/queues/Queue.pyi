from ..foundation import Application
from typing import Any, Optional, Protocol, TypeVar

QueueDriver_T = TypeVar('QueueDriver_T', bound=QueueDriver)

class QueueDriver(Protocol):
    def set_options(self, options: dict[str, Any]) -> QueueDriver_T: ...
    def push(self, *jobs: Any, args: tuple[Any] = ..., **kwargs: Any) -> None: ...
    def consume(self, **options: Any) -> None: ...
    def retry(self, **options: Any) -> None: ...

Queue_T = TypeVar('Queue_T', bound=Queue)

class Queue:
    application: Application
    drivers: dict[str, QueueDriver]
    driver_config: dict[str, Any]
    options: dict[str, Any]
    def __init__(self, application: Application, driver_config: Optional[dict[str, Any]] = ...) -> None: ...
    def add_driver(self, name: str, driver: QueueDriver) -> None: ...
    def set_configuration(self, config: dict[str, Any]) -> Queue_T: ...
    def get_driver(self, name: Optional[str] = ...) -> QueueDriver: ...
    def get_config_options(self, driver: Optional[str] = ...) -> dict[str, Any]: ...
    def push(self, *jobs: Any, **options: Any) -> None: ...
    def consume(self, options: Any) -> None: ...
    def retry(self, options: Any) -> None: ...

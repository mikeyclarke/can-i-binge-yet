from ..foundation.Application import Application
from .limiters import Limiter as Limiter
from typing import Any, Callable

class RateLimiter:
    application: Application
    limiters: dict[str, Limiter]
    def __init__(self, application: Application) -> None: ...
    def register(self, name: str, callback: Limiter) -> RateLimiter: ...
    @property
    def cache(self) -> Any: ...
    def attempts(self, key: str) -> int: ...
    def clean_key(self, key: str) -> str: ...
    def get_limiter(self, name: str) -> Limiter: ...
    def attempt(self, key: str, callback: Callable[[], Any], max_attempts: int, delay: int = ...) -> Any: ...
    def too_many_attempts(self, key: str, max_attempts: int) -> bool: ...
    def hit(self, key: str, delay: int) -> int: ...
    def reset_attempts(self, key: str) -> bool: ...
    def clear(self, key: str) -> None: ...
    def available_at(self, key: str) -> int: ...
    def available_in(self, key: str) -> int: ...
    def remaining(self, key: str, max_attempts: int) -> int: ...

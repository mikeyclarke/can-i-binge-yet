from ..foundation.Application import Application
from jinja2 import BaseLoader
from jinja2 import Environment
from typing import Any, Callable, Optional, Sequence

def path_to_package(path: str, separator: str = ...) -> tuple[str, str]: ...

class View:
    separator: str
    extension: str
    application: Application
    dictionary: dict[str, Any]
    composers: dict[str, Any]
    template: Optional[str]
    loaders: list[Any]
    namespaces: dict[str, list[str]]
    env: Optional[Environment]
    filename: Optional[str]
    rendered_template: str
    def __init__(self, application: Application) -> None: ...
    def render(self, template: str, dictionary: dict[str, Any] = ...) -> View: ...
    def get_content(self) -> str: ...
    def hydrate_from_composers(self) -> None: ...
    def composer(self, composer_name: str, dictionary: dict[str, Any]) -> View: ...
    def share(self, dictionary: dict[str, Any]) -> View: ...
    def exists(self, template: str) -> bool: ...
    def add_location(self, template_location: str, loader: BaseLoader = ...) -> None: ...
    def add_namespaced_location(self, namespace: str, template_location: str) -> None: ...
    def add_from_package(self, package_name: str, path_in_package: str) -> None: ...
    def filter(self, name: str, function: Callable[..., Any]) -> None: ...
    def add_extension(self, extension: str) -> View: ...
    def load_template(self, template: str) -> None: ...
    def get_current_loaders(self) -> Sequence[BaseLoader]: ...
    def set_separator(self, token: str) -> View: ...
    def set_file_extension(self, extension: str) -> View: ...
    def get_response(self) -> str: ...
    def test(self, key: str, obj: Any) -> View: ...

from ..authorization.AuthorizesRequest import AuthorizesRequest
from ..cookies import CookieJar
from ..headers import Header
from ..headers import HeaderBag
from ..input import InputBag
from ..routes.Route import Route
from .validation import ValidatesRequest
from typing import Any, Optional, TypeVar

Environ = dict[str, Any]
Params = dict[str, Any]

T = TypeVar('T', bound=Request)

class Request(ValidatesRequest, AuthorizesRequest):
    environ: Environ
    cookie_jar: CookieJar
    header_bag: HeaderBag
    input_bag: InputBag
    params: Params
    route: Optional[Route]
    def __init__(self, environ: Environ) -> None: ...
    def load(self) -> None: ...
    def load_params(self, params: Optional[Params] = ...) -> None: ...
    def param(self, param: str, default: str = ...) -> Any: ...
    def get_route(self) -> Route: ...
    def get_path(self) -> str: ...
    def get_path_with_query(self) -> str: ...
    def get_back_path(self) -> str: ...
    def get_request_method(self) -> str: ...
    def input(self, name: str, default: Any = ...) -> str: ...
    def cookie(self, name: str, value: str = ..., **options: Any) -> None: ...
    def delete_cookie(self, name: str) -> Request: ...
    def header(self, name: str, value: str = ...) -> Optional[str]: ...
    def all(self) -> dict[str, Any]: ...
    def only(self, *inputs: str) -> dict[str, Any]: ...
    def old(self, key: str) -> Any: ...
    def is_not_safe(self) -> bool: ...
    def user(self) -> Optional[Any]: ...
    def set_user(self, user: Any) -> Request: ...
    def remove_user(self) -> Request: ...
    def contains(self, route: str) -> bool: ...
    def get_subdomain(self, exclude_www: bool = ...) -> Optional[str]: ...
    def get_host(self) -> str: ...
    def activate_subdomains(self) -> T: ...
    def ip(self) -> Optional[str]: ...
    def accepts_json(self) -> bool: ...

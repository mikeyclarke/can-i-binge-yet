from ..exceptions import ContainerError as ContainerError, MissingContainerBindingNotFound as MissingContainerBindingNotFound, StrictContainerException as StrictContainerException
from inspect import Parameter
from types import MappingProxyType
from typing import Any
from typing_extensions import Literal

class Container:
    objects: dict[str, Any]
    strict: bool
    override: bool
    resolve_parameters: dict[Any, Any] | bool
    remember: bool
    swaps: dict[Any, Any]
    def bind(self, name: str, class_obj: Any) -> Container: ...
    def unbind(self, name: str) -> Container | Literal[False]: ...
    def simple(self, obj: Any) -> Container: ...
    def singleton(self, name: str, class_obj: Any) -> None: ...
    def make(self, name: Any, *arguments: Any) -> Any: ...
    def has(self, name: Any) -> bool: ...
    def helper(self) -> Container: ...
    def resolve(self, obj: Any, *resolving_arguments: Any) -> Any: ...
    def collect(self, search: Any) -> dict[str, Any]: ...
    def get_parameters(self, obj: Any) -> MappingProxyType[str, Parameter]: ...
    def on_bind(self, key: Any, obj: Any) -> Container: ...
    def on_make(self, key: Any, obj: Any) -> Container: ...
    def on_resolve(self, key: Any, obj: Any) -> Container: ...
    def swap(self, obj: Any, callback: Any) -> Container: ...
    def fire_hook(self, action: str, key: Any, obj: Any) -> None: ...
    def __contains__(self, obj: Any) -> bool: ...

from masonite.foundation import Application
from typing import Any, Protocol

class Listener(Protocol):
    def handle(self, event: Event) -> None: ...

Events = dict[str | object, list[Listener]]

class Event:
    application: Application
    events: Events
    def __init__(self, application: Application) -> None: ...
    def get_events(self) -> Events: ...
    def listen(self, event: str | object, listeners: list[Listener]) -> Event: ...
    def fire(self, event: str | object, *args: Any, **kwargs: Any) -> list[str | object]: ...
    def collect_events(self, fired_event: str) -> list[str]: ...
    def subscribe(self, *listeners: list[Listener]) -> None: ...

from ..foundation.Application import Application
from ..routes import Route, HTTPRoute
from typing import Any, Optional, Protocol, TypeVar

Driver_T = TypeVar('Driver_T', bound=Driver)

class Driver(Protocol):
    application: Application
    connection: Any
    options: dict[str, Any]
    def __init__(self, application: Application) -> None: ...
    def set_options(self, options: dict[str, Any]) -> Driver_T: ...
    def get_connection(self) -> Any: ...
    def channel(self, channel: str, event: str, value: Any) -> None: ...
    def authorize(self, channel: str, socket_id: str | int) -> bool: ...

Broadcast_T = TypeVar('Broadcast_T', bound=Broadcast)

class Broadcast:
    application: Application
    drivers: dict[str, Driver]
    store_config: dict[str, Any]
    options: dict[str, Any]
    def __init__(self, application: Application, store_config: Optional[dict[str, Any]] = ...) -> None: ...
    def add_driver(self, name: str, driver: Driver) -> None: ...
    def set_configuration(self, config: dict[str, Any]) -> Broadcast_T: ...
    def get_driver(self, name: Optional[str] = ...) -> Optional[Driver]: ...
    def driver(self, name: Optional[str] = ...) -> Driver: ...
    def get_config_options(self, name: Optional[str] = ...) -> Any: ...
    def channel(self, channels: Any, event: Optional[Any] = ..., value: Optional[Any] = ..., driver: Optional[str] = ...) -> None: ...
    @classmethod
    def routes(self, auth_route: str = ...) -> list[HTTPRoute]: ...

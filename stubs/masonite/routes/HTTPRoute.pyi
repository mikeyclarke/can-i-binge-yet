from ..foundation.Application import Application
from ..response.response import Response
from typing import Any, Match, Optional, Pattern, TypeVar

ControllersLocations = list[str]
Controller = Optional[str | Any]
RequestMethod = list[str]
Middlewares = list[str]
Compilers = Optional[dict[str, str]]
ControllerBindings = list[Any]

T = TypeVar('T', bound=HTTPRoute)

class HTTPRoute:
    url: str
    controllers_locations: ControllersLocations
    controller: Controller
    controller_class: Any
    controller_instance: Any
    controller_method: str
    request_method: RequestMethod
    list_middleware: Middlewares
    excluded_middlewares: Middlewares
    e: Optional[Exception]
    compilers: Compilers
    controller_bindings: ControllerBindings
    url_list: list[str]
    def __init__(
        self,
        url: str,
        controller: Controller = ...,
        request_method: RequestMethod = ...,
        name: Optional[str] = ...,
        compilers: Compilers = ...,
        controllers_locations: ControllersLocations = ...,
        controller_bindings: ControllerBindings = ...,
        **options: Any
    ) -> None: ...
    def match(self, path: str, request_method: str, subdomain: Optional[str] = ...) -> bool: ...
    def get_name(self) -> Optional[str]: ...
    def matches(self, path: str) -> Optional[Match[str]]: ...
    def match_name(self, name: str) -> bool: ...
    def name(self, name: str) -> T: ...
    def domain(self, subdomain: str) -> T: ...
    def to_url(self, parameters: dict[str, Any] = ..., query_params: dict[str, Any] = ...) -> str: ...
    def get_response(self, app: Optional[Application] = ...) -> Response: ...
    def middleware(self, *args: Any) -> T: ...
    def prepend_middleware(self, *args: Any) -> T: ...
    def get_middlewares(self) -> Middlewares: ...
    def set_middleware(self, middleware: Middlewares) -> T: ...
    def exclude_middleware(self, *args: Middlewares) -> T: ...
    def compile_route_to_regex(self) -> str: ...
    def extract_parameters(self, path: str) -> dict[str, Any]: ...
    def casts(self, _casts_map: dict[str, Any] = ...) -> T: ...

from ..controllers.ViewController import ViewController as ViewController
from ..utils.collections import flatten as flatten
from ..utils.str import modularize as modularize
from .HTTPRoute import HTTPRoute
from typing import Any, Optional

ControllersLocations = list[str]
Controller = Optional[str | Any]

class Route:
    routes: list[HTTPRoute]
    compilers: dict[str, str]
    controllers_locations: ControllersLocations
    def __init__(self) -> None: ...
    @classmethod
    def get(self, url: str, controller: Controller, module_location: Optional[list[str]] = ..., **options: Any) -> HTTPRoute: ...
    @classmethod
    def post(self, url: str, controller: Controller, **options: Any) -> HTTPRoute: ...
    @classmethod
    def put(self, url: str, controller: Controller, **options: Any) -> HTTPRoute: ...
    @classmethod
    def patch(self, url: str, controller: Controller, **options: Any) -> HTTPRoute: ...
    @classmethod
    def delete(self, url: str, controller: Controller, **options: Any) -> HTTPRoute: ...
    @classmethod
    def options(self, url: str, controller: Controller, **options: Any) -> HTTPRoute: ...
    @classmethod
    def default(self, url: str, controller: Controller, **options: Any) -> Route: ...
    @classmethod
    def redirect(self, url: str, new_url: str, **options: Any) -> HTTPRoute: ...
    @classmethod
    def view(self, url: str, template: str, data: Optional[dict[str, Any]] = ..., **options: Any) -> HTTPRoute: ...
    @classmethod
    def permanent_redirect(self, url: str, new_url: str, **options: Any) -> HTTPRoute: ...
    @classmethod
    def match(self, request_methods: list[str], url: str, controller: Controller, **options: Any) -> HTTPRoute: ...
    @classmethod
    def group(self, *routes: list[HTTPRoute], **options: Any) -> list[HTTPRoute]: ...
    @classmethod
    def resource(self, base_url: str, controller: str) -> list[str]: ...
    @classmethod
    def api(self, base_url: str, controller: str) -> list[str]: ...
    @classmethod
    def compile(self, key: str, to: str = ...) -> Route: ...
    @classmethod
    def set_controller_locations(self, *controllers_locations: str) -> Route: ...
    @classmethod
    def add_controller_locations(self, *controllers_locations: str) -> Route: ...

from ..configuration import config as config
from ..facades import Loader as Loader
from ..filesystem import UploadedFile as UploadedFile
from ..utils.structures import data_get as data_get
from .MessageBag import MessageBag as MessageBag
from .RuleEnclosure import RuleEnclosure as RuleEnclosure
from masoniteorm.query import QueryBuilder # type: ignore
from typing import Any, Optional, TypeVar

Messages = dict[str, str]
Validations = list[str]
Raises = dict[str, Exception] | bool

BaseValidation_T = TypeVar('BaseValidation_T', bound=BaseValidation)

class BaseValidation:
    errors: dict[str, str]
    messages: Messages
    validations: Validations
    negated: bool
    raises: Raises
    def __init__(self, validations: Validations, messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def error(self, key: str, message: str) -> None: ...
    def find(self, key: str, dictionary: dict[str, Any], default: str = ...) -> Any: ...
    def message(self, key: str) -> str: ...
    def negate(self) -> BaseValidation_T: ...
    def raise_exception(self, key: str) -> None: ...
    def handle(self, dictionary: dict[str, Any]) -> Optional[bool]: ...
    def reset(self) -> None: ...

class required(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, key: str) -> str: ...
    def negated_message(self, key: str) -> str: ...

class timezone(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class one_of(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class boolean(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class accepted(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class ip(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class date(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class before_today(BaseValidation):
    tz: str
    def __init__(self, validations: Validations, tz: str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class after_today(BaseValidation):
    tz: str
    def __init__(self, validations: Validations, tz: str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class is_past(BaseValidation):
    tz: str
    def __init__(self, validations: Validations, tz: str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class is_future(BaseValidation):
    tz: str
    def __init__(self, validations: Validations, tz: str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class email(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class matches(BaseValidation):
    match: str
    def __init__(self, validations: Validations, match: str, messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class exists(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

def resolve_model_or_table(string: str) -> tuple[str, Optional[Any]]: ...

class exists_in_db(BaseValidation):
    connection: QueryBuilder
    column: Optional[str]
    def __init__(self, validations: Validations, table_or_model: str | Any, column: Optional[str] = ..., connection: str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class not_exists_in_db(BaseValidation):
    connection: QueryBuilder
    column: Optional[str]
    def __init__(self, validations: Validations, table_or_model: str | Any, column: Optional[str] = ..., connection: str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class unique_in_db(BaseValidation):
    connection: QueryBuilder
    column: Optional[str]
    def __init__(self, validations: Validations, table_or_model: str | Any, column: Optional[str] = ..., connection: str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class active_domain(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class numeric(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class is_list(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class string(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class none(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class length(BaseValidation):
    min: int
    max: int
    def __init__(self, validations: Validations, min: int | str = ..., max: int | bool = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class in_range(BaseValidation):
    min: int
    max: int
    def __init__(self, validations: Validations, min: int = ..., max: int = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class equals(BaseValidation):
    value: Any
    def __init__(self, validations: Validations, value: Any = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class contains(BaseValidation):
    value: Any
    def __init__(self, validations: Validations, value: Any = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class is_in(BaseValidation):
    value: Any
    def __init__(self, validations: Validations, value: Any = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class greater_than(BaseValidation):
    value: int | str
    def __init__(self, validations: Validations, value: int | str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class less_than(BaseValidation):
    value: int | str
    def __init__(self, validations: Validations, value: int | str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class strong(BaseValidation):
    length: int
    uppercase: int
    lowercase: int
    numbers: int
    special: int
    special_chars: Optional[str]
    breach: bool
    length_check: bool
    uppercase_check: bool
    lowercase_check: bool
    numbers_check: bool
    special_check: bool
    breach_check: bool
    def __init__(
        self,
        validations: Validations,
        length: int = ...,
        uppercase: int = ...,
        lowercase: int = ...,
        numbers: int = ...,
        special: int = ...,
        special_chars: Optional[str] = ...,
        breach: bool = ...,
        messages: Messages = ...,
        raises: Raises = ...
    ) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class isnt(BaseValidation):
    def __init__(self, *rules: Validations, messages: Messages = ..., raises: Raises = ...) -> None: ...
    def handle(self, dictionary: dict[str, Any]) -> None: ...

DoesNot_T = TypeVar('DoesNot_T', bound=does_not)

class does_not(BaseValidation):
    should_run_then: bool
    def __init__(self, *rules: Validations, messages: Messages = ..., raises: Raises = ...) -> None: ...
    dictionary: dict[str, Any]
    def handle(self, dictionary: dict[str, Any]) -> None: ...
    then_rules: Validations
    def then(self, *rules: Validations) -> DoesNot_T: ...

When_T = TypeVar('When_T', bound=when)

class when(BaseValidation):
    should_run_then: bool
    def __init__(self, *rules: Validations, messages: Messages = ..., raises: Raises = ...) -> None: ...
    dictionary: dict[str, Any]
    def handle(self, dictionary: dict[str, Any]) -> None: ...
    then_rules: Validations
    def then(self, *rules: Validations) -> When_T: ...

class truthy(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class json(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class phone(BaseValidation):
    pattern: str
    def __init__(self, *rules: Validations, pattern: str = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class confirmed(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class regex(BaseValidation):
    pattern: str
    def __init__(self, validations: Validations, pattern: str, messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

def parse_size(size: str | int | bool) -> int: ...

class BaseFileValidation(BaseValidation):
    file_check: bool
    size_check: bool
    mimes_check: bool
    all_clear: bool
    def __init__(self, validations: Validations, messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...

class file(BaseFileValidation):
    size: int
    allowed_extensions: bool | list[str]
    allowed_mimetypes: bool | list[str]
    def __init__(self, validations: Validations, size: str | int | bool = ..., mimes: list[str] | bool = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class image(BaseFileValidation):
    size: int
    allowed_extensions: list[str]
    allowed_mimetypes: list[str]
    def __init__(self, validations: Validations, size: str | int | bool = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class video(BaseFileValidation):
    size: int
    allowed_extensions: list[str]
    allowed_mimetypes: list[str]
    def __init__(self, validations: Validations, size: str | int | bool = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class postal_code(BaseValidation):
    locales: list[str]
    patterns: list[str]
    patterns_example: list[str]
    def __init__(self, validations: Validations, locale: str, messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class different(BaseValidation):
    other_field: str
    def __init__(self, validations: Validations, other_field: str, messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class uuid(BaseValidation):
    version: int
    uuid_type: str
    def __init__(self, validations: Validations, version: int = ..., messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class required_if(BaseValidation):
    other_field: str
    value: Any
    def __init__(self, validations: Validations, other_field: str, value: Any, messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class required_with(BaseValidation):
    other_fields: list[str]
    def __init__(self, validations: Validations, other_fields: list[str] | str, messages: Messages = ..., raises: Raises = ...) -> None: ...
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

class distinct(BaseValidation):
    def passes(self, attribute: Any, key: str, dictionary: dict[str, Any]) -> bool: ...
    def message(self, attribute: str) -> str: ...
    def negated_message(self, attribute: str) -> str: ...

Validator_T = TypeVar('Validator_T', bound=Validator)

class Validator:
    def __init__(self) -> None: ...
    def validate(self, dictionary: dict[str, Any], *rules: Validations) -> MessageBag: ...
    def parse_string(self, rule: str) -> BaseValidation: ...
    def parse_dict(self, rule: dict[str, Any], dictionary: dict[str, Any], rule_errors: dict[str, str]) -> None: ...
    def run_enclosure(self, enclosure: Any, dictionary: dict[str, Any]) -> dict[str, str]: ...
    def extend(self, key: str | dict[str, Any], obj: Optional[Any] = ...) -> Validator_T: ...
    def register(self, *cls: list[BaseValidation]) -> None: ...

class ValidationFactory:
    registry: dict[str, BaseValidation]
    def __init__(self) -> None: ...
    def register(self, *cls: list[BaseValidation]) -> None: ...

from ..foundation.Application import Application
from ..routes import Route, HTTPRoute
from .models.authenticates import Authenticates
from typing import Any, Literal, Optional, Protocol

class Guard(Protocol):
    def set_options(self, options: dict[str, Any]) -> None: ...
    def attempt(self, username: str, password: str) -> Authenticates | None: ...
    def get_auth_column(self, username: str) -> str | Literal[False]: ...
    def register(self, dictionary: dict[str, Any]) -> Authenticates | Literal[False] | None: ...
    def user(self) -> Authenticates | Literal[False] | None: ...
    def attempt_by_id(self, user_id: int) -> Authenticates | Literal[False] | None: ...
    def reset_password(self, username: str, new_password: str) -> Authenticates | Literal[False] | None: ...
    def once(self) -> Guard: ...
    def logout(self) -> Guard: ...

class Auth:
    application: Application
    guards: dict[str, Guard]
    guard_config: dict[str, Any]
    options: dict[str, Any]
    def __init__(self, application: Application, guard_config: Optional[dict[str, Any]] = ...) -> None: ...
    def add_guard(self, name: str, guard: Guard) -> None: ...
    def set_configuration(self, config: dict[str, Any]) -> Auth: ...
    def guard(self, guard: str) -> Auth: ...
    def get_guard(self, name: Optional[str] = ...) -> Guard: ...
    def get_config_options(self, guard: Optional[str] = ...) -> dict[str, Any]: ...
    def attempt(self, email: str, password: str, once: bool = ...) -> Authenticates | None: ...
    def attempt_by_id(self, user_id: int | str, once: bool = ...) -> Authenticates | Literal[False] | None: ...
    def logout(self) -> None: ...
    def user(self) -> Authenticates | Literal[False] | None: ...
    def register(self, dictionary: dict[str, Any]) -> Authenticates | Literal[False] | None: ...
    def set_user(self, user: Authenticates | Literal[False] | None) -> Auth: ...
    def password_reset(self, email: str) -> tuple[Optional[str], Optional[str]]: ...
    def reset_password(self, password: str, token: str) -> bool: ...
    @classmethod
    def routes(self) -> list[HTTPRoute]: ...
